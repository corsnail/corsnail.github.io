<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="https://corsnail.github.io/atom.xml" rel="self"/>
  
  <link href="https://corsnail.github.io/"/>
  <updated>2023-08-17T13:50:52.124Z</updated>
  <id>https://corsnail.github.io/</id>
  
  <author>
    <name>snail</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>生日快乐</title>
    <link href="https://corsnail.github.io/2023/08/17/%E7%94%9F%E6%97%A5%E5%BF%AB%E4%B9%90/"/>
    <id>https://corsnail.github.io/2023/08/17/%E7%94%9F%E6%97%A5%E5%BF%AB%E4%B9%90/</id>
    <published>2023-08-17T09:32:19.000Z</published>
    <updated>2023-08-17T13:50:52.124Z</updated>
    
    <content type="html"><![CDATA[<p>祝曾大帅哥生日快乐<br><a href="https://corsnail.github.io/justforzeng/index.html">点击这里</a><br><a href="https://corsnail.github.io/justforzeng/index.html"><img src="/%E6%9B%BE.jpg" alt="点击这里"></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;祝曾大帅哥生日快乐&lt;br&gt;&lt;a href=&quot;https://corsnail.github.io/justforzeng/index.html&quot;&gt;点击这里&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://corsnail.github.io/justforzeng/inde</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>leetcode每日一题7.20kandane</title>
    <link href="https://corsnail.github.io/2023/07/20/leetcode%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%987-20kandane/"/>
    <id>https://corsnail.github.io/2023/07/20/leetcode%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%987-20kandane/</id>
    <published>2023-07-20T03:20:06.000Z</published>
    <updated>2023-07-20T05:24:44.912Z</updated>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode.cn/problems/maximum-sum-circular-subarray/">https://leetcode.cn/problems/maximum-sum-circular-subarray/</a><br>leetcode今天的题目是一个环形数组求最大和<br><img src="/images/article/20230720/leetcode%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%987-20kandane/0.png"><br>很明显是一个动态规划，使用kandane算法很简单解决</p><h2 id="kandane算法"><a href="#kandane算法" class="headerlink" title="kandane算法"></a>kandane算法</h2><p>讲解：<a href="https://medium.com/@rsinghal757/kadanes-algorithm-dynamic-programming-how-and-why-does-it-work-3fd8849ed73d">https://medium.com/@rsinghal757/kadanes-algorithm-dynamic-programming-how-and-why-does-it-work-3fd8849ed73d</a><br>这个大佬讲的比较好<br>设数组为a时，<br>当前索引i的最大子数组和等于前索引i-1的最大子数组和加上当前值a[i]<br><img src="/images/article/20230720/leetcode%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%987-20kandane/1.png"><br>代码实现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int maxSubarraySumCircular(vector&lt;int&gt;&amp; nums) &#123;</span><br><span class="line">        int len = nums.size();</span><br><span class="line">        int local_max = 0;</span><br><span class="line">        int global_max = INT_MIN;</span><br><span class="line"></span><br><span class="line">        for (int i = 0; i &lt; 2*len; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            local_max = max(nums[i%len],nums[i%len] + local_max);</span><br><span class="line">            if (local_max &gt; global_max)</span><br><span class="line">                global_max = local_max;</span><br><span class="line">        &#125;</span><br><span class="line">        return global_max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>但是这个问题比起其他题目有所不同，是一个环形数组</p><h2 id="最大子数组有两种情况"><a href="#最大子数组有两种情况" class="headerlink" title="最大子数组有两种情况"></a>最大子数组有两种情况</h2><h3 id="case1"><a href="#case1" class="headerlink" title="case1"></a>case1</h3><p>最大子数组和在中间，这时上面的代码就可以直接使用得到最大子数组和<br><img src="/images/article/20230720/leetcode%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%987-20kandane/2.png"></p><h3 id="case2"><a href="#case2" class="headerlink" title="case2"></a>case2</h3><p>最大子数组贯穿头尾<br><img src="/images/article/20230720/leetcode%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%987-20kandane/3.png"><br>这时就只能计算最小子数组和，然后用总和减去最小的子数组和即可</p><p>最终代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int maxSubarraySumCircular(vector&lt;int&gt;&amp; nums) &#123;</span><br><span class="line">        int len = nums.size();</span><br><span class="line">        int local_max = 0;</span><br><span class="line">        int global_max = INT_MIN;</span><br><span class="line">        int total_sum = 0;</span><br><span class="line"></span><br><span class="line">        for (int i = 0; i &lt; len; i++) &#123;</span><br><span class="line">            local_max = max(nums[i], nums[i] + local_max);</span><br><span class="line">            global_max = max(local_max, global_max);</span><br><span class="line">            total_sum += nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        //对于环形的数组，总和一定，总和减去最小的子数组和就是最大子数组和</span><br><span class="line">        int min_wrap = INT_MAX;</span><br><span class="line">        int current_sum = 0;</span><br><span class="line">        for (int i = 0; i &lt; len; ++i) &#123;</span><br><span class="line">            current_sum = min(nums[i], nums[i] + current_sum);</span><br><span class="line">            min_wrap = min(min_wrap, current_sum);</span><br><span class="line">        &#125;</span><br><span class="line">        int max_wrap = total_sum - min_wrap; // 重新计算 max_wrap</span><br><span class="line"></span><br><span class="line">        if (max_wrap == 0) &#123;</span><br><span class="line">            return global_max;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        return max(global_max, max_wrap);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;题目链接：&lt;a href=&quot;https://leetcode.cn/problems/maximum-sum-circular-subarray/&quot;&gt;https://leetcode.cn/problems/maximum-sum-circular-subarray/&lt;/a</summary>
      
    
    
    
    <category term="算法" scheme="https://corsnail.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="leetcode" scheme="https://corsnail.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>linux可执行文件添加到环境变量</title>
    <link href="https://corsnail.github.io/2023/07/04/linux%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6%E6%B7%BB%E5%8A%A0%E5%88%B0%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/"/>
    <id>https://corsnail.github.io/2023/07/04/linux%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6%E6%B7%BB%E5%8A%A0%E5%88%B0%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</id>
    <published>2023-07-04T13:59:28.000Z</published>
    <updated>2023-07-08T06:21:52.146Z</updated>
    
    <content type="html"><![CDATA[<h2 id="遇见问题"><a href="#遇见问题" class="headerlink" title="遇见问题"></a>遇见问题</h2><p>在使用fscan的过程中，需要把源码下载下来编译，编译之后是一个可执行文件而使用时就需要</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./main -h 192.168.1.133/24</span><br></pre></td></tr></table></figure><p><img src="/images/article/20230704/linux%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6%E6%B7%BB%E5%8A%A0%E5%88%B0%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/0.png"><br>于是我就想将可执行文件添加到环境变量中</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><ol><li>打开配置文件，看终端，可能是bashrc，我的是zshrc<br><img src="/images/article/20230704/linux%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6%E6%B7%BB%E5%8A%A0%E5%88%B0%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/1.png"></li><li>在末尾加入一行，&#x2F;path&#x2F;to&#x2F;fscan是你的fscan目录路径，刚编译好的fscan需要改个名<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=/path/to/fscan:$PATH</span><br></pre></td></tr></table></figure><img src="/images/article/20230704/linux%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6%E6%B7%BB%E5%8A%A0%E5%88%B0%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/2.png"></li><li>然后记得更新<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.zshrc</span><br></pre></td></tr></table></figure>然后就可以在终端的任何地方使用fscan了<br><img src="/images/article/20230704/linux%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6%E6%B7%BB%E5%8A%A0%E5%88%B0%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/3.png"></li></ol><p>其实不止这一种方法，添加进不同的位置有不同的作用，可以参考：<br><a href="https://blog.csdn.net/weixin_38870322/article/details/80169531">https://blog.csdn.net/weixin_38870322/article/details/80169531</a></p><p>另外还有个思路，linux会有一个文件夹（&#x2F;bin）专门放可执行文件，linux环境变量会加入这个文件夹的全部变量，输入下面命令可以看到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $PATH</span><br></pre></td></tr></table></figure><p><img src="/images/article/20230704/linux%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6%E6%B7%BB%E5%8A%A0%E5%88%B0%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/4.png"><br>有很多个目录，建议不要打乱它本身的秩序，具体不同分类的区别可以看下面<br><a href="https://blog.csdn.net/lh2016rocky/article/details/70801030">https://blog.csdn.net/lh2016rocky/article/details/70801030</a><br>总结就是：</p><blockquote><p>重要的二进制位于 &#x2F;bin（用户二进制）以及 &#x2F;sbin（系统二进制）中。不重要的二进制（如图形环境或Office 工具）安装在 &#x2F;usr&#x2F;bin 和 &#x2F;usr&#x2F;sbin中。进行这种分隔是为了尽可能地缩小根分区。使用源代码编译的软件通常位于 &#x2F;usr&#x2F;local&#x2F;bin 和 &#x2F;usr&#x2F;local&#x2F;sbin中。</p></blockquote><p>所以这里我们的fscan应该放到&#x2F;usr&#x2F;local&#x2F;bin中，<br>直接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp /home/kali/fscan/fscan /usr/local/bin</span><br></pre></td></tr></table></figure><p>记得sudo<br><img src="/images/article/20230704/linux%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6%E6%B7%BB%E5%8A%A0%E5%88%B0%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/5.png"><br>这样去掉环境变量中的fscan目录，也可以使用<br><img src="/images/article/20230704/linux%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6%E6%B7%BB%E5%8A%A0%E5%88%B0%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/6.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;遇见问题&quot;&gt;&lt;a href=&quot;#遇见问题&quot; class=&quot;headerlink&quot; title=&quot;遇见问题&quot;&gt;&lt;/a&gt;遇见问题&lt;/h2&gt;&lt;p&gt;在使用fscan的过程中，需要把源码下载下来编译，编译之后是一个可执行文件而使用时就需要&lt;/p&gt;
&lt;figure class</summary>
      
    
    
    
    <category term="技术分享" scheme="https://corsnail.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="linux" scheme="https://corsnail.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>hexo使用</title>
    <link href="https://corsnail.github.io/2023/07/04/hexo%E4%BD%BF%E7%94%A8/"/>
    <id>https://corsnail.github.io/2023/07/04/hexo%E4%BD%BF%E7%94%A8/</id>
    <published>2023-07-04T03:07:11.000Z</published>
    <updated>2023-07-04T05:34:05.676Z</updated>
    
    <content type="html"><![CDATA[<p>hexo g  # 生成博客网页文件<br>hexo s  # 本地预览博客<br>hexo d  # 上传网页文件到github</p><p>hexo new post “article title” #新建文章</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;hexo g  # 生成博客网页文件&lt;br&gt;hexo s  # 本地预览博客&lt;br&gt;hexo d  # 上传网页文件到github&lt;/p&gt;
&lt;p&gt;hexo new post “article title” #新建文章&lt;/p&gt;
</summary>
      
    
    
    
    <category term="hexo" scheme="https://corsnail.github.io/categories/hexo/"/>
    
    
    <category term="hexo" scheme="https://corsnail.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>你好</title>
    <link href="https://corsnail.github.io/2023/06/06/%E4%BD%A0%E5%A5%BD/"/>
    <id>https://corsnail.github.io/2023/06/06/%E4%BD%A0%E5%A5%BD/</id>
    <published>2023-06-06T12:21:35.000Z</published>
    <updated>2023-06-06T12:22:06.053Z</updated>
    
    <content type="html"><![CDATA[<p>hello!</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;hello!&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
</feed>
