{"meta":{"title":"Hexo","subtitle":"","description":"","author":"snail","url":"https://corsnail.github.io","root":"/"},"pages":[{"title":"关于","date":"2023-07-04T06:21:36.942Z","updated":"2023-07-04T06:21:36.942Z","comments":false,"path":"about/index.html","permalink":"https://corsnail.github.io/about/index.html","excerpt":"","text":"Github: https://github.com/corsnailBlog: http://corsnail.github.io"},{"title":"Repositories","date":"2023-07-04T03:33:41.639Z","updated":"2023-06-08T06:52:04.461Z","comments":false,"path":"repository/index.html","permalink":"https://corsnail.github.io/repository/index.html","excerpt":"","text":""},{"title":"分类","date":"2023-06-08T06:52:04.459Z","updated":"2023-06-08T06:52:04.459Z","comments":false,"path":"categories/index.html","permalink":"https://corsnail.github.io/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2023-06-08T06:52:04.462Z","updated":"2023-06-08T06:52:04.462Z","comments":false,"path":"tags/index.html","permalink":"https://corsnail.github.io/tags/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2023-07-04T03:36:02.824Z","updated":"2023-06-08T06:52:04.460Z","comments":true,"path":"links/index.html","permalink":"https://corsnail.github.io/links/index.html","excerpt":"","text":""}],"posts":[{"title":"z3求解器的简单使用","slug":"z3求解器的简单使用","date":"2023-11-07T02:42:02.000Z","updated":"2023-11-07T08:39:04.225Z","comments":true,"path":"2023/11/07/z3求解器的简单使用/","link":"","permalink":"https://corsnail.github.io/2023/11/07/z3%E6%B1%82%E8%A7%A3%E5%99%A8%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/","excerpt":"","text":"之前遇见简单的逆向题用z3求解器简单求过，但是没有仔细学习过，这次又遇到一道逆向题，听说z3爆破很有作用 基本数据类型12345Int #整型Bool #布尔型Real #实数Array #数组BitVec(&#x27;a&#x27;,8) #char型 其中BitVec是一个比较灵活的数据结构，他可以指定特定大小。比如使用BitBec(‘a’,32)就可以表示c语言的int型 常用语法solver()solver()会创建一个通用求解器，创建后我们可以添加我们的约束条件，进行下一步的求解 add()add()用来添加约束条件，约束条件通常是一个逻辑等式 check()check()如其名，用于判断，有解会回显sat，无解会回显unsat model()model()用于多解集的情况，它会限制条件所对应的解集的交集，得出唯一解 常用求解四步骤：创建约束求解器 1solver = Solver() 添加约束条件（这一步是z3求解的关键） 1solver.add() 判断解是否存在 1if solver.check()==sat: 求解 1print solver.model() 使用实例感觉难度不是很大，接下来就要从编写脚本中体验了NewStarCTF 2023的逆向R4ndom,通过一个码表加密flag，进行了下面这样一个运算(题解实际还包含一个随机数和一个反调试题解) 1input[i] = Table[(16 * ((tmp + rand_num % 255) &gt;&gt; 4) + 15) &amp; (tmp + rand_num % 255)]; 题目链接 直接写python也不是不能写，代码如下 12345678910111213141516171819202122232425262728293031323334353637383940414243import randomtable = [ 0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76, 0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0, 0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15, 0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75, 0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84, 0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF, 0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8, 0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2, 0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73, 0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB, 0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79, 0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08, 0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A, 0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E, 0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF, 0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16]enc = [0xEE, 0xE6, 0xD7, 0xB2, 0x8A, 0xAB, 0x13, 0x35, 0x02, 0x7B, 0xC9, 0xB9, 0x9C, 0xBA, 0xED, 0x2E, 0xBD, 0x4F, 0xFA, 0xEE, 0xC8, 0xF8, 0xE4, 0x16, 0x82, 0x63, 0x3B, 0x98, 0xF4, 0x14, 0x30, 0x38, 0x07, 0x36, 0x84, 0x3D, 0x0C, 0x36, 0x32, 0xEA, 0x55, 0xA6]rkey = [51,137,172,215,84,204,74,165,53,209,219,163,230,147,15,127,149,77,231,101,128,175,107,210,204,205,20,173,141,105,198,64,242,242,24,71,64,226,108,117,180,72,]flag = &quot;&quot;for j in range(len(enc)): for i in range(32, 126): i = int(i) tmp = table[((16 * ((i + rkey[j] % 255) &gt;&gt; 4) + 15) &amp; (i + rkey[j] % 255)) &amp; 0xff] if enc[j] == tmp: flag += chr(i) breakprint(flag) 接下来我用z3来求一求 123456789101112131415161718192021222324from z3 import *...# 这里将索引获取index = []for i in enc: index.append((table.index(i)))# 创建 Z3 求解器s = Solver()# 创建符号变量 temptemp = [BitVec(&#x27;%d&#x27; % i, 8) for i in range(len(enc))]# 添加len(enc)个约束条件for i in range(len(enc)): constraint = index[i] == (16 * ((temp[i] + rkey[i] % 255) &gt;&gt; 4) + 15) &amp; (temp[i] + rkey[i] % 255) s.add(constraint)if s.check() == sat: indexult = s.model() for i in range(len(enc)): flag += chr(indexult[temp[i]].as_long())print(flag) 通过添加很多个约束条件来利用z3求解，效率还是挺高的 参考链接[原创]Z3求解约束器及例题z3约束器Z3一把梭：用约束求解搞定一类CTF题","categories":[{"name":"Re","slug":"Re","permalink":"https://corsnail.github.io/categories/Re/"}],"tags":[{"name":"z3","slug":"z3","permalink":"https://corsnail.github.io/tags/z3/"}]},{"title":"leetcode每日一题7.20kandane","slug":"leetcode每日一题7-20kandane","date":"2023-07-20T03:20:06.000Z","updated":"2023-07-20T05:24:44.912Z","comments":true,"path":"2023/07/20/leetcode每日一题7-20kandane/","link":"","permalink":"https://corsnail.github.io/2023/07/20/leetcode%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%987-20kandane/","excerpt":"","text":"题目链接：https://leetcode.cn/problems/maximum-sum-circular-subarray/leetcode今天的题目是一个环形数组求最大和很明显是一个动态规划，使用kandane算法很简单解决 kandane算法讲解：https://medium.com/@rsinghal757/kadanes-algorithm-dynamic-programming-how-and-why-does-it-work-3fd8849ed73d这个大佬讲的比较好设数组为a时，当前索引i的最大子数组和等于前索引i-1的最大子数组和加上当前值a[i]代码实现 12345678910111213141516class Solution &#123;public: int maxSubarraySumCircular(vector&lt;int&gt;&amp; nums) &#123; int len = nums.size(); int local_max = 0; int global_max = INT_MIN; for (int i = 0; i &lt; 2*len; i++) &#123; local_max = max(nums[i%len],nums[i%len] + local_max); if (local_max &gt; global_max) global_max = local_max; &#125; return global_max; &#125;&#125;; 但是这个问题比起其他题目有所不同，是一个环形数组 最大子数组有两种情况case1最大子数组和在中间，这时上面的代码就可以直接使用得到最大子数组和 case2最大子数组贯穿头尾这时就只能计算最小子数组和，然后用总和减去最小的子数组和即可 最终代码： 1234567891011121314151617181920212223242526272829class Solution &#123;public: int maxSubarraySumCircular(vector&lt;int&gt;&amp; nums) &#123; int len = nums.size(); int local_max = 0; int global_max = INT_MIN; int total_sum = 0; for (int i = 0; i &lt; len; i++) &#123; local_max = max(nums[i], nums[i] + local_max); global_max = max(local_max, global_max); total_sum += nums[i]; &#125; //对于环形的数组，总和一定，总和减去最小的子数组和就是最大子数组和 int min_wrap = INT_MAX; int current_sum = 0; for (int i = 0; i &lt; len; ++i) &#123; current_sum = min(nums[i], nums[i] + current_sum); min_wrap = min(min_wrap, current_sum); &#125; int max_wrap = total_sum - min_wrap; // 重新计算 max_wrap if (max_wrap == 0) &#123; return global_max; &#125; return max(global_max, max_wrap); &#125;&#125;;","categories":[{"name":"算法","slug":"算法","permalink":"https://corsnail.github.io/categories/%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://corsnail.github.io/tags/leetcode/"}]},{"title":"linux可执行文件添加到环境变量","slug":"linux可执行文件添加到环境变量","date":"2023-07-04T13:59:28.000Z","updated":"2023-07-08T06:21:52.146Z","comments":true,"path":"2023/07/04/linux可执行文件添加到环境变量/","link":"","permalink":"https://corsnail.github.io/2023/07/04/linux%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6%E6%B7%BB%E5%8A%A0%E5%88%B0%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/","excerpt":"","text":"遇见问题在使用fscan的过程中，需要把源码下载下来编译，编译之后是一个可执行文件而使用时就需要 1./main -h 192.168.1.133/24 于是我就想将可执行文件添加到环境变量中 解决 打开配置文件，看终端，可能是bashrc，我的是zshrc 在末尾加入一行，&#x2F;path&#x2F;to&#x2F;fscan是你的fscan目录路径，刚编译好的fscan需要改个名1export PATH=/path/to/fscan:$PATH 然后记得更新1source ~/.zshrc 然后就可以在终端的任何地方使用fscan了 其实不止这一种方法，添加进不同的位置有不同的作用，可以参考：https://blog.csdn.net/weixin_38870322/article/details/80169531 另外还有个思路，linux会有一个文件夹（&#x2F;bin）专门放可执行文件，linux环境变量会加入这个文件夹的全部变量，输入下面命令可以看到 1echo $PATH 有很多个目录，建议不要打乱它本身的秩序，具体不同分类的区别可以看下面https://blog.csdn.net/lh2016rocky/article/details/70801030总结就是： 重要的二进制位于 &#x2F;bin（用户二进制）以及 &#x2F;sbin（系统二进制）中。不重要的二进制（如图形环境或Office 工具）安装在 &#x2F;usr&#x2F;bin 和 &#x2F;usr&#x2F;sbin中。进行这种分隔是为了尽可能地缩小根分区。使用源代码编译的软件通常位于 &#x2F;usr&#x2F;local&#x2F;bin 和 &#x2F;usr&#x2F;local&#x2F;sbin中。 所以这里我们的fscan应该放到&#x2F;usr&#x2F;local&#x2F;bin中，直接 1sudo cp /home/kali/fscan/fscan /usr/local/bin 记得sudo这样去掉环境变量中的fscan目录，也可以使用","categories":[{"name":"技术分享","slug":"技术分享","permalink":"https://corsnail.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://corsnail.github.io/tags/linux/"}]},{"title":"hexo使用","slug":"hexo使用","date":"2023-07-04T03:07:11.000Z","updated":"2023-07-04T05:34:05.676Z","comments":true,"path":"2023/07/04/hexo使用/","link":"","permalink":"https://corsnail.github.io/2023/07/04/hexo%E4%BD%BF%E7%94%A8/","excerpt":"","text":"hexo g # 生成博客网页文件hexo s # 本地预览博客hexo d # 上传网页文件到github hexo new post “article title” #新建文章","categories":[{"name":"hexo","slug":"hexo","permalink":"https://corsnail.github.io/categories/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://corsnail.github.io/tags/hexo/"}]},{"title":"你好","slug":"你好","date":"2023-06-06T12:21:35.000Z","updated":"2023-06-06T12:22:06.053Z","comments":true,"path":"2023/06/06/你好/","link":"","permalink":"https://corsnail.github.io/2023/06/06/%E4%BD%A0%E5%A5%BD/","excerpt":"","text":"hello!","categories":[],"tags":[]}],"categories":[{"name":"Re","slug":"Re","permalink":"https://corsnail.github.io/categories/Re/"},{"name":"算法","slug":"算法","permalink":"https://corsnail.github.io/categories/%E7%AE%97%E6%B3%95/"},{"name":"技术分享","slug":"技术分享","permalink":"https://corsnail.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"},{"name":"hexo","slug":"hexo","permalink":"https://corsnail.github.io/categories/hexo/"}],"tags":[{"name":"z3","slug":"z3","permalink":"https://corsnail.github.io/tags/z3/"},{"name":"leetcode","slug":"leetcode","permalink":"https://corsnail.github.io/tags/leetcode/"},{"name":"linux","slug":"linux","permalink":"https://corsnail.github.io/tags/linux/"},{"name":"hexo","slug":"hexo","permalink":"https://corsnail.github.io/tags/hexo/"}]}